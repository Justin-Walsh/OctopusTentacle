package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.CommitStatusPublisher
import jetbrains.buildServer.configs.kotlin.v2019_2.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.VcsTrigger
import jetbrains.buildServer.configs.kotlin.v2019_2.triggers.vcs
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'Publish'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("Publish")) {
    triggers {
        val trigger1 = find<VcsTrigger> {
            vcs {
            }
        }
        trigger1.apply {
            enabled = false

        }
    }

    features {
        val feature1 = find<CommitStatusPublisher> {
            commitStatusPublisher {
                publisher = github {
                    githubUrl = "https://api.github.com"
                    authType = personalToken {
                        token = "credentialsJSON:e3abf97f-cad5-4d88-9a7a-f588c55c53ed"
                    }
                }
            }
        }
        feature1.apply {
            publisher = github {
                githubUrl = "https://api.github.com"
                authType = personalToken {
                    token = "credentialsJSON:7416c240-5c67-48ed-97a3-f5fe49d0e744"
                }
            }
        }
    }

    dependencies {
        expect(RelativeId("Build")) {
            snapshot {
                onDependencyFailure = FailureAction.CANCEL
                onDependencyCancel = FailureAction.CANCEL
            }

            artifacts {
                cleanDestination = true
                artifactRules = "Octopus.Shared.*.nupkg"
            }
        }
        update(RelativeId("Build")) {
            snapshot {
                onDependencyFailure = FailureAction.FAIL_TO_START
            }

            artifacts {
                cleanDestination = true
                artifactRules = "Octopus.Shared.*.nupkg"
            }
        }

        expect(RelativeId("TestOnWindows")) {
            snapshot {
                onDependencyFailure = FailureAction.CANCEL
                onDependencyCancel = FailureAction.CANCEL
            }
        }
        update(RelativeId("TestOnWindows")) {
            snapshot {
                onDependencyFailure = FailureAction.FAIL_TO_START
            }
        }

        expect(RelativeId("TestOnLinux")) {
            snapshot {
                onDependencyFailure = FailureAction.CANCEL
                onDependencyCancel = FailureAction.CANCEL
            }
        }
        update(RelativeId("TestOnLinux")) {
            snapshot {
                onDependencyFailure = FailureAction.FAIL_TO_START
            }
        }

    }

    requirements {
        remove {
            equals("system.Octopus.OSPlatform", "Windows")
        }
        add {
            startsWith("system.agent.name", "nautilus-")
        }
    }
}
